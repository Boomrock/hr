import React, { useState, useEffect, useRef } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { 
  Bot, 
  User, 
  Send, 
  Mic, 
  ArrowLeft,
  Brain,
  Target,
  CheckCircle,
  Clock,
  FileText,
  TrendingUp,
  Award,
  AlertTriangle,
  Lightbulb
} from 'lucide-react';
import { VoiceInput } from './VoiceInput';
import type { AppUser } from '@/types/profile';
import type { ExtendedEmployeeProfile, CandidateProfile } from '@/types/extended-profile';
import { STANDARD_COMPETENCIES } from '@/types/competencies';

interface EnhancedAIInterviewProps {
  user: AppUser;
  onBack: () => void;
  onComplete?: (profile: CandidateProfile) => void;
}

interface InterviewMessage {
  id: string;
  role: 'ai' | 'user';
  content: string;
  timestamp: Date;
  audioUrl?: string;
  analysis?: MessageAnalysis;
  questionType?: 'intro' | 'technical' | 'behavioral' | 'situational' | 'final';
}

interface MessageAnalysis {
  keywords: string[];
  sentiment: 'positive' | 'neutral' | 'negative';
  confidence: number;
  competencyIndicators: Record<string, number>;
  experienceLevel: number; // 1-5
  communicationQuality: number; // 1-5
  technicalDepth: number; // 1-5
}

interface InterviewSession {
  id: string;
  candidateId: string;
  status: 'intro' | 'technical' | 'behavioral' | 'situational' | 'analysis' | 'completed';
  currentPhase: number;
  totalPhases: number;
  startTime: Date;
  endTime?: Date;
  messages: InterviewMessage[];
  cumulativeAnalysis: {
    overallScore: number;
    competencyScores: Record<string, number>;
    strengths: string[];
    weaknesses: string[];
    keyInsights: string[];
  };
  generatedProfile?: CandidateProfile;
}

interface QuestionTemplate {
  phase: string;
  questions: Array<{
    id: string;
    text: string;
    type: 'open' | 'behavioral' | 'technical' | 'situational';
    competency?: string;
    followUp?: string[];
  }>;
}

// –®–∞–±–ª–æ–Ω—ã –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∏–Ω—Ç–µ—Ä–≤—å—é
const INTERVIEW_TEMPLATES: QuestionTemplate[] = [
  {
    phase: 'intro',
    questions: [
      {
        id: 'intro_1',
        text: '–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ: –≤–∞—à–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ, –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã –∏ –∫–ª—é—á–µ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è.',
        type: 'open',
        followUp: ['–ö–∞–∫–æ–π –ø—Ä–æ–µ–∫—Ç —Å—á–∏—Ç–∞–µ—Ç–µ –Ω–∞–∏–±–æ–ª–µ–µ –∑–Ω–∞—á–∏–º—ã–º?', '–ß—Ç–æ –º–æ—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–æ –≤—ã–±—Ä–∞—Ç—å —ç—Ç—É —Å—Ñ–µ—Ä—É?']
      },
      {
        id: 'intro_2', 
        text: '–ö–∞–∫–∏–º–∏ –Ω–∞–≤—ã–∫–∞–º–∏ –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º–∏ –≤—ã –≤–ª–∞–¥–µ–µ—Ç–µ? –û—Ü–µ–Ω–∏—Ç–µ —Å–≤–æ–π —É—Ä–æ–≤–µ–Ω—å –ø–æ –∫–∞–∂–¥–æ–º—É.',
        type: 'technical',
        followUp: ['–ö–∞–∫–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏–∑—É—á–∞–µ—Ç–µ —Å–µ–π—á–∞—Å?', '–ö–∞–∫–æ–π –Ω–∞–≤—ã–∫ —Ö–æ—Ç–µ–ª–∏ –±—ã —Ä–∞–∑–≤–∏—Ç—å –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å?']
      }
    ]
  },
  {
    phase: 'technical',
    questions: [
      {
        id: 'tech_1',
        text: '–û–ø–∏—à–∏—Ç–µ —Å–∞–º—É—é —Å–ª–æ–∂–Ω—É—é —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –∑–∞–¥–∞—á—É, –∫–æ—Ç–æ—Ä—É—é –≤–∞–º –ø—Ä–∏—Ö–æ–¥–∏–ª–æ—Å—å —Ä–µ—à–∞—Ç—å. –ö–∞–∫–æ–π –ø–æ–¥—Ö–æ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏?',
        type: 'technical',
        competency: 'productivity',
        followUp: ['–ö–∞–∫ –æ—Ü–µ–Ω–∏–≤–∞–ª–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è?', '–ß—Ç–æ –±—ã —Å–¥–µ–ª–∞–ª–∏ –ø–æ-–¥—Ä—É–≥–æ–º—É?']
      },
      {
        id: 'tech_2',
        text: '–ö–∞–∫ –≤—ã –ø–æ–¥—Ö–æ–¥–∏—Ç–µ –∫ –∏–∑—É—á–µ–Ω–∏—é –Ω–æ–≤—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –∏–ª–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤?',
        type: 'behavioral',
        competency: 'initiative',
        followUp: ['–ú–æ–∂–µ—Ç–µ –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø—Ä–∏–º–µ—Ä?', '–ö–∞–∫ –¥–µ–ª–∏—Ç–µ—Å—å –∑–Ω–∞–Ω–∏—è–º–∏ —Å –∫–æ–º–∞–Ω–¥–æ–π?']
      }
    ]
  },
  {
    phase: 'behavioral',
    questions: [
      {
        id: 'behav_1',
        text: '–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–∏—Ç—É–∞—Ü–∏–∏, –∫–æ–≥–¥–∞ –≤–∞–º –ø—Ä–∏—à–ª–æ—Å—å —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –∫–æ–º–∞–Ω–¥–µ –ø–æ–¥ –¥–∞–≤–ª–µ–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏. –ö–∞–∫ –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–ª–∏ —Ä–∞–±–æ—Ç—É?',
        type: 'behavioral',
        competency: 'leadership',
        followUp: ['–ö–∞–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–ª–∏ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å?', '–ö–∞–∫ –º–æ—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –∫–æ–º–∞–Ω–¥—É?']
      },
      {
        id: 'behav_2',
        text: '–û–ø–∏—à–∏—Ç–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–Ω—É—é —Å–∏—Ç—É–∞—Ü–∏—é –Ω–∞ —Ä–∞–±–æ—Ç–µ –∏ –∫–∞–∫ –≤—ã –µ—ë —Ä–∞–∑—Ä–µ—à–∏–ª–∏.',
        type: 'behavioral',
        competency: 'communication',
        followUp: ['–ß—Ç–æ –ø–æ–º–æ–≥–ª–æ –Ω–∞–π—Ç–∏ –∫–æ–º–ø—Ä–æ–º–∏—Å—Å?', '–ö–∞–∫ –∏–∑–±–µ–∂–∞—Ç—å –ø–æ–¥–æ–±–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π?']
      },
      {
        id: 'behav_3',
        text: '–ö–æ–≥–¥–∞ –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑ –≤—ã –ø—Ä–æ—è–≤–∏–ª–∏ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—É –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤?',
        type: 'behavioral',
        competency: 'initiative',
        followUp: ['–ö–∞–∫–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—É—á–∏–ª–∏?', '–ö–∞–∫ –∫–æ–ª–ª–µ–≥–∏ –æ—Ç—Ä–µ–∞–≥–∏—Ä–æ–≤–∞–ª–∏ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è?']
      }
    ]
  },
  {
    phase: 'situational',
    questions: [
      {
        id: 'sit_1',
        text: '–ü—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ: –≤—ã –ø–æ–ª—É—á–∏–ª–∏ –∑–∞–¥–∞—á—É —Å –Ω–µ—á—ë—Ç–∫–∏–º–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏ –∏ —Å–∂–∞—Ç—ã–º–∏ —Å—Ä–æ–∫–∞–º–∏. –í–∞—à–∏ –¥–µ–π—Å—Ç–≤–∏—è?',
        type: 'situational',
        competency: 'reliability',
        followUp: ['–ö–∞–∫ –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∏—Ä—É–µ—Ç–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è?', '–ö –∫–æ–º—É –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∑–∞ –ø–æ–º–æ—â—å—é?']
      },
      {
        id: 'sit_2',
        text: '–ö–∞–∫ –±—ã –≤—ã –ø–æ—Å—Ç—É–ø–∏–ª–∏, –µ—Å–ª–∏ –∑–∞–º–µ—Ç–∏–ª–∏, —á—Ç–æ –∫–æ–ª–ª–µ–≥–∞ –¥–µ–ª–∞–µ—Ç –æ—à–∏–±–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤–ª–∏—è—é—Ç –Ω–∞ –æ–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç?',
        type: 'situational',
        competency: 'communication',
        followUp: ['–ö–∞–∫ –ø–æ—Å—Ç—Ä–æ–∏—Ç–µ —Ä–∞–∑–≥–æ–≤–æ—Ä?', '–ß—Ç–æ –µ—Å–ª–∏ –∫–æ–ª–ª–µ–≥–∞ –Ω–µ —Å–æ–≥–ª–∞—Å–µ–Ω?']
      }
    ]
  }
];

export function EnhancedAIInterview({ user, onBack, onComplete }: EnhancedAIInterviewProps) {
  const [session, setSession] = useState<InterviewSession | null>(null);
  const [currentMessage, setCurrentMessage] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [useVoice, setUseVoice] = useState(false);
  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
  const [showAnalysis, setShowAnalysis] = useState(false);
  
  const messagesEndRef = useRef<HTMLDivElement>(null);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏
  useEffect(() => {
    initializeSession();
  }, []);

  // –ê–≤—Ç–æ—Å–∫—Ä–æ–ª–ª –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [session?.messages]);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏ –∏–Ω—Ç–µ—Ä–≤—å—é
  const initializeSession = () => {
    const newSession: InterviewSession = {
      id: Date.now().toString(),
      candidateId: user.email || user.name,
      status: 'intro',
      currentPhase: 0,
      totalPhases: INTERVIEW_TEMPLATES.length,
      startTime: new Date(),
      messages: [],
      cumulativeAnalysis: {
        overallScore: 0,
        competencyScores: {},
        strengths: [],
        weaknesses: [],
        keyInsights: []
      }
    };

    setSession(newSession);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    const welcomeMessage = generateWelcomeMessage();
    addAIMessage(newSession.id, welcomeMessage, 'intro');
  };

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
  const generateWelcomeMessage = (): string => {
    return `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –ò–ò-–∏–Ω—Ç–µ—Ä–≤—å—é! –Ø –ø—Ä–æ–≤–µ–¥—É —Å –≤–∞–º–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ –¥–ª—è —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è.

–ò–Ω—Ç–µ—Ä–≤—å—é —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ 4 —ç—Ç–∞–ø–æ–≤:
1. üéØ –ó–Ω–∞–∫–æ–º—Å—Ç–≤–æ –∏ –æ–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
2. üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏ 
3. ü§ù –ü–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã
4. üí° –°–∏—Ç—É–∞—Ü–∏–æ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏

–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–≤–µ—á–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ –≥–æ–ª–æ—Å–æ–º. –ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å?`;
  };

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ò–ò
  const addAIMessage = (sessionId: string, content: string, questionType?: InterviewMessage['questionType']) => {
    const aiMessage: InterviewMessage = {
      id: Date.now().toString(),
      role: 'ai',
      content,
      timestamp: new Date(),
      questionType
    };

    setSession(prev => prev ? {
      ...prev,
      messages: [...prev.messages, aiMessage]
    } : null);
  };

  // –ê–Ω–∞–ª–∏–∑ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const analyzeUserResponse = (content: string, questionType?: string, competency?: string): MessageAnalysis => {
    // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
    const keywords = extractKeywords(content);
    
    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
    const sentiment = analyzeSentiment(content);
    
    // –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏
    const communicationQuality = analyzeCommunicationQuality(content);
    
    // –û—Ü–µ–Ω–∫–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –≥–ª—É–±–∏–Ω—ã
    const technicalDepth = analyzeTechnicalDepth(content, questionType);
    
    // –û—Ü–µ–Ω–∫–∞ —É—Ä–æ–≤–Ω—è –æ–ø—ã—Ç–∞
    const experienceLevel = analyzeExperienceLevel(content);
    
    // –û—Ü–µ–Ω–∫–∞ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π
    const competencyIndicators = analyzeCompetencyIndicators(content, competency);

    return {
      keywords,
      sentiment,
      confidence: Math.min(95, Math.max(60, content.length / 10 + Math.random() * 20)),
      communicationQuality,
      technicalDepth,
      experienceLevel,
      competencyIndicators
    };
  };

  // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
  const extractKeywords = (text: string): string[] => {
    const commonWords = ['–∏', '–≤', '–Ω–∞', '—Å', '–ø–æ', '–¥–ª—è', '–æ—Ç', '–¥–æ', '–∏–∑', '—É', '–æ', '–æ–±', '–ø—Ä–∏', '—á—Ç–æ', '–∫–∞–∫', '—ç—Ç–æ', '–±—ã–ª', '–±—ã–ª–∞', '–±—ã–ª–æ', '–±—ã–ª–∏'];
    const words = text.toLowerCase()
      .replace(/[^\w\s–∞-—è—ë]/gi, '')
      .split(/\s+/)
      .filter(word => word.length > 3 && !commonWords.includes(word));
    
    // –ü–æ–¥—Å—á–µ—Ç —á–∞—Å—Ç–æ—Ç—ã –∏ –≤–æ–∑–≤—Ä–∞—Ç —Ç–æ–ø-10
    const frequency = words.reduce((acc, word) => {
      acc[word] = (acc[word] || 0) + 1;
      return acc;
    }, {} as Record<string, number>);
    
    return Object.entries(frequency)
      .sort(([,a], [,b]) => b - a)
      .slice(0, 10)
      .map(([word]) => word);
  };

  // –ê–Ω–∞–ª–∏–∑ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ (–ø—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞)
  const analyzeSentiment = (text: string): 'positive' | 'neutral' | 'negative' => {
    const positiveWords = ['—Ö–æ—Ä–æ—à–æ', '–æ—Ç–ª–∏—á–Ω–æ', '—É—Å–ø–µ—à–Ω–æ', '—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ', '–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ', '–¥–æ—Å—Ç–∏–≥', '—É–ª—É—á—à–∏–ª', '—Ä–µ—à–∏–ª'];
    const negativeWords = ['–ø–ª–æ—Ö–æ', '—Å–ª–æ–∂–Ω–æ', '–ø—Ä–æ–±–ª–µ–º–∞', '–æ—à–∏–±–∫–∞', '–Ω–µ—É–¥–∞—á–∞', '—Ç—Ä—É–¥–Ω–æ', '–Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å'];
    
    const positive = positiveWords.some(word => text.toLowerCase().includes(word));
    const negative = negativeWords.some(word => text.toLowerCase().includes(word));
    
    if (positive && !negative) return 'positive';
    if (negative && !positive) return 'negative';
    return 'neutral';
  };

  // –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏
  const analyzeCommunicationQuality = (text: string): number => {
    let score = 3; // –ë–∞–∑–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å
    
    // –î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞
    if (text.length > 200) score += 0.5;
    if (text.length > 500) score += 0.5;
    
    // –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç—å
    if (text.includes('–≤–æ-–ø–µ—Ä–≤—ã—Ö') || text.includes('—Å–Ω–∞—á–∞–ª–∞') || text.includes('–∑–∞—Ç–µ–º')) score += 0.5;
    
    // –ö–æ–Ω–∫—Ä–µ—Ç–Ω–æ—Å—Ç—å
    if (text.includes('–Ω–∞–ø—Ä–∏–º–µ—Ä') || text.includes('–∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ') || text.includes('–≤ —á–∞—Å—Ç–Ω–æ—Å—Ç–∏')) score += 0.5;
    
    // –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –ª–µ–∫—Å–∏–∫–∞
    const professionalWords = ['–∞–Ω–∞–ª–∏–∑', '—Å—Ç—Ä–∞—Ç–µ–≥–∏—è', '–ø—Ä–æ—Ü–µ—Å—Å', '—Ä–µ–∑—É–ª—å—Ç–∞—Ç', '—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å', '–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è'];
    if (professionalWords.some(word => text.toLowerCase().includes(word))) score += 0.5;
    
    return Math.min(5, score);
  };

  // –ê–Ω–∞–ª–∏–∑ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –≥–ª—É–±–∏–Ω—ã
  const analyzeTechnicalDepth = (text: string, questionType?: string): number => {
    if (questionType !== 'technical') return 0;
    
    let score = 2;
    
    // –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã
    const techTerms = ['–∞–ª–≥–æ—Ä–∏—Ç–º', '–∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞', '–±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö', 'API', '—Ñ—Ä–µ–π–º–≤–æ—Ä–∫', '–±–∏–±–ª–∏–æ—Ç–µ–∫–∞', '–ø–∞—Ç—Ç–µ—Ä–Ω'];
    const foundTerms = techTerms.filter(term => text.toLowerCase().includes(term));
    score += foundTerms.length * 0.3;
    
    // –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏
    const technologies = ['javascript', 'python', 'react', 'node', 'sql', 'docker', 'kubernetes'];
    const foundTech = technologies.filter(tech => text.toLowerCase().includes(tech));
    score += foundTech.length * 0.2;
    
    return Math.min(5, score);
  };

  // –ê–Ω–∞–ª–∏–∑ —É—Ä–æ–≤–Ω—è –æ–ø—ã—Ç–∞
  const analyzeExperienceLevel = (text: string): number => {
    let score = 2;
    
    // –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã
    if (text.includes('–ª–µ—Ç') || text.includes('–≥–æ–¥–∞')) score += 0.5;
    if (text.includes('–ø—Ä–æ–µ–∫—Ç') || text.includes('–∫–æ–º–∞–Ω–¥')) score += 0.5;
    if (text.includes('—Ä—É–∫–æ–≤–æ–¥–∏–ª') || text.includes('—É–ø—Ä–∞–≤–ª—è–ª')) score += 1;
    if (text.includes('–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä') || text.includes('–ª–∏–¥') || text.includes('senior')) score += 1;
    
    return Math.min(5, score);
  };

  // –ê–Ω–∞–ª–∏–∑ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π
  const analyzeCompetencyIndicators = (text: string, competency?: string): Record<string, number> => {
    const indicators: Record<string, number> = {};
    
    // –ê–Ω–∞–ª–∏–∑ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏
    Object.keys(STANDARD_COMPETENCIES).forEach(comp => {
      let score = 2; // –ë–∞–∑–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å
      
      switch (comp) {
        case 'communication':
          if (text.includes('–æ–±—ä—è—Å–Ω–∏–ª') || text.includes('–ø—Ä–µ–∑–µ–Ω—Ç–æ–≤–∞–ª')) score += 1;
          if (text.includes('–∫–æ–º–∞–Ω–¥') || text.includes('–∫–æ–ª–ª–µ–≥')) score += 0.5;
          break;
        case 'leadership':
          if (text.includes('—Ä—É–∫–æ–≤–æ–¥–∏–ª') || text.includes('–≤–æ–∑–≥–ª–∞–≤–ª—è–ª')) score += 1.5;
          if (text.includes('–º–æ—Ç–∏–≤–∏—Ä–æ–≤–∞–ª') || text.includes('–æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–ª')) score += 1;
          break;
        case 'productivity':
          if (text.includes('–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–ª') || text.includes('—É—Å–∫–æ—Ä–∏–ª')) score += 1;
          if (text.includes('—Ä–µ–∑—É–ª—å—Ç–∞—Ç') || text.includes('—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å')) score += 0.5;
          break;
        case 'reliability':
          if (text.includes('—Å–æ–±–ª—é–¥–∞–ª') || text.includes('–≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–ª')) score += 1;
          if (text.includes('–∫–∞—á–µ—Å—Ç–≤–æ') || text.includes('–Ω–∞–¥–µ–∂–Ω–æ')) score += 0.5;
          break;
        case 'initiative':
          if (text.includes('–ø—Ä–µ–¥–ª–æ–∂–∏–ª') || text.includes('–∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–ª')) score += 1;
          if (text.includes('—É–ª—É—á—à–µ–Ω–∏–µ') || text.includes('–∏–Ω–Ω–æ–≤–∞—Ü–∏—è')) score += 0.5;
          break;
      }
      
      indicators[comp] = Math.min(5, score);
    });
    
    return indicators;
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
  const handleSendMessage = async () => {
    if (!currentMessage.trim() || !session) return;

    const userMessage: InterviewMessage = {
      id: Date.now().toString(),
      role: 'user',
      content: currentMessage.trim(),
      timestamp: new Date()
    };

    // –ê–Ω–∞–ª–∏–∑ –æ—Ç–≤–µ—Ç–∞
    const currentTemplate = INTERVIEW_TEMPLATES[session.currentPhase];
    const currentQuestion = currentTemplate?.questions[currentQuestionIndex];
    
    userMessage.analysis = analyzeUserResponse(
      currentMessage.trim(),
      currentQuestion?.type,
      currentQuestion?.competency
    );

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const updatedSession = {
      ...session,
      messages: [...session.messages, userMessage]
    };

    setSession(updatedSession);
    setCurrentMessage('');
    setIsLoading(true);

    // –û–±–Ω–æ–≤–ª—è–µ–º –∫—É–º—É–ª—è—Ç–∏–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑
    updateCumulativeAnalysis(updatedSession, userMessage.analysis!);

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
    setTimeout(() => {
      generateNextQuestion(updatedSession);
      setIsLoading(false);
    }, 1000 + Math.random() * 2000);
  };

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—É–º—É–ª—è—Ç–∏–≤–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
  const updateCumulativeAnalysis = (session: InterviewSession, analysis: MessageAnalysis) => {
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–π —Å—á–µ—Ç
    const messageCount = session.messages.filter(m => m.role === 'user').length;
    const newOverallScore = (session.cumulativeAnalysis.overallScore * (messageCount - 1) + 
      (analysis.communicationQuality + analysis.experienceLevel) / 2) / messageCount;

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç–∞ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π
    const competencyScores = { ...session.cumulativeAnalysis.competencyScores };
    Object.entries(analysis.competencyIndicators).forEach(([comp, score]) => {
      competencyScores[comp] = competencyScores[comp] 
        ? (competencyScores[comp] + score) / 2 
        : score;
    });

    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª—é—á–µ–≤—ã–µ –∏–Ω—Å–∞–π—Ç—ã
    const insights = [...session.cumulativeAnalysis.keyInsights];
    if (analysis.sentiment === 'positive') {
      insights.push('–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π –Ω–∞—Å—Ç—Ä–æ–π');
    }
    if (analysis.technicalDepth > 3) {
      insights.push('–•–æ—Ä–æ—à–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∑–Ω–∞–Ω–∏—è');
    }
    if (analysis.communicationQuality > 4) {
      insights.push('–û—Ç–ª–∏—á–Ω—ã–µ –∫–æ–º–º—É–Ω–∏–∫–∞—Ç–∏–≤–Ω—ã–µ –Ω–∞–≤—ã–∫–∏');
    }

    session.cumulativeAnalysis = {
      overallScore: newOverallScore,
      competencyScores,
      strengths: generateStrengths(competencyScores),
      weaknesses: generateWeaknesses(competencyScores),
      keyInsights: [...new Set(insights)].slice(-5) // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö
    };
  };

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–ª—å–Ω—ã—Ö —Å—Ç–æ—Ä–æ–Ω
  const generateStrengths = (scores: Record<string, number>): string[] => {
    return Object.entries(scores)
      .filter(([, score]) => score >= 4)
      .map(([comp]) => STANDARD_COMPETENCIES[comp]?.name || comp)
      .slice(0, 3);
  };

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª–∞–±—ã—Ö —Å—Ç–æ—Ä–æ–Ω
  const generateWeaknesses = (scores: Record<string, number>): string[] => {
    return Object.entries(scores)
      .filter(([, score]) => score < 3)
      .map(([comp]) => STANDARD_COMPETENCIES[comp]?.name || comp)
      .slice(0, 3);
  };

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
  const generateNextQuestion = (session: InterviewSession) => {
    const currentTemplate = INTERVIEW_TEMPLATES[session.currentPhase];
    
    if (currentQuestionIndex < currentTemplate.questions.length - 1) {
      // –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –≤ —Ç–µ–∫—É—â–µ–π —Ñ–∞–∑–µ
      setCurrentQuestionIndex(currentQuestionIndex + 1);
      const nextQuestion = currentTemplate.questions[currentQuestionIndex + 1];
      addAIMessage(session.id, nextQuestion.text, nextQuestion.type as any);
    } else if (session.currentPhase < session.totalPhases - 1) {
      // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–π —Ñ–∞–∑–µ
      const nextPhase = session.currentPhase + 1;
      setCurrentQuestionIndex(0);
      session.currentPhase = nextPhase;
      
      const phaseNames = ['–ó–Ω–∞–∫–æ–º—Å—Ç–≤–æ', '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã', '–ü–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã', '–°–∏—Ç—É–∞—Ü–∏–æ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏'];
      const transitionMessage = `–û—Ç–ª–∏—á–Ω–æ! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É: "${phaseNames[nextPhase]}".`;
      addAIMessage(session.id, transitionMessage);
      
      setTimeout(() => {
        const nextTemplate = INTERVIEW_TEMPLATES[nextPhase];
        const firstQuestion = nextTemplate.questions[0];
        addAIMessage(session.id, firstQuestion.text, firstQuestion.type as any);
      }, 1500);
    } else {
      // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤—å—é
      finishInterview(session);
    }
  };

  // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤—å—é
  const finishInterview = (session: InterviewSession) => {
    session.status = 'completed';
    session.endTime = new Date();
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
    const profile = generateCandidateProfile(session);
    session.generatedProfile = profile;
    
    const completionMessage = `–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ç–µ—Ä–≤—å—é! –Ø –∑–∞–≤–µ—Ä—à–∏–ª –∞–Ω–∞–ª–∏–∑ –≤–∞—à–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤ –∏ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–ª –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å. 

–û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞: ${session.cumulativeAnalysis.overallScore.toFixed(1)}/5.0

–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–æ –≤–∫–ª–∞–¥–∫–µ "–ê–Ω–∞–ª–∏–∑".`;
    
    addAIMessage(session.id, completionMessage, 'final');
    setShowAnalysis(true);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é
    const savedSessions = localStorage.getItem('ai-interview-sessions') || '[]';
    const sessions = JSON.parse(savedSessions);
    sessions.push(session);
    localStorage.setItem('ai-interview-sessions', JSON.stringify(sessions));
    
    if (onComplete && profile) {
      onComplete(profile);
    }
  };

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—Ñ–∏–ª—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
  const generateCandidateProfile = (session: InterviewSession): CandidateProfile => {
    const analysis = session.cumulativeAnalysis;
    
    return {
      basicInfo: {
        name: user.name,
        position: '–ö–∞–Ω–¥–∏–¥–∞—Ç',
        experience: Math.round(analysis.overallScore),
        education: ['–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —É–∫–∞–∑–∞–Ω–æ –≤ –æ—Ç–≤–µ—Ç–∞—Ö']
      },
      competencyAssessment: Object.fromEntries(
        Object.entries(analysis.competencyScores).map(([comp, score]) => [
          comp,
          {
            score: Math.round(score * 10) / 10,
            evidence: [`–û—Ü–µ–Ω–µ–Ω–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç–≤–µ—Ç–æ–≤ –≤ –∏–Ω—Ç–µ—Ä–≤—å—é`],
            confidence: 85
          }
        ])
      ),
      behavioralInsights: {
        workStyle: '–û–ø—Ä–µ–¥–µ–ª–µ–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç–≤–µ—Ç–æ–≤',
        decisionMaking: '–ê–Ω–∞–ª–∏–∑ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π',
        problemSolving: '–ü–æ–¥—Ö–æ–¥ –∫ —Ä–µ—à–µ–Ω–∏—é –ø—Ä–æ–±–ª–µ–º',
        communication: '–°—Ç–∏–ª—å –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏',
        leadership: '–õ–∏–¥–µ—Ä—Å–∫–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞',
        teamwork: '–†–∞–±–æ—Ç–∞ –≤ –∫–æ–º–∞–Ω–¥–µ'
      },
      motivationFactors: analysis.keyInsights,
      potentialRisks: analysis.weaknesses,
      fitAssessment: {
        roleAlignment: Math.round(analysis.overallScore * 20),
        cultureAlignment: Math.round(analysis.overallScore * 18),
        teamAlignment: Math.round(analysis.overallScore * 19),
        overallFit: Math.round(analysis.overallScore * 20)
      },
      developmentPlan: {
        immediateActions: ['–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É –ø–æ –ø–ª–∞–Ω—É —Ä–∞–∑–≤–∏—Ç–∏—è'],
        shortTermGoals: analysis.weaknesses.map(w => `–†–∞–∑–≤–∏—Ç—å ${w}`),
        longTermGoals: ['–î–æ—Å—Ç–∏—á—å —ç–∫—Å–ø–µ—Ä—Ç–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è'],
        requiredSupport: ['–ú–µ–Ω—Ç–æ—Ä–∏–Ω–≥', '–û–±—É—á–µ–Ω–∏–µ', '–ü—Ä–∞–∫—Ç–∏–∫–∞']
      }
    };
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞
  const handleVoiceInput = (transcript: string) => {
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
    setCurrentMessage(prev => {
      const newText = transcript.trim();
      if (!newText) return prev;
      
      // –ï—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–µ–∫—Å—Ç –ø—É—Å—Ç–æ–π, –ø—Ä–æ—Å—Ç–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π
      if (!prev.trim()) return newText;
      
      // –ï—Å–ª–∏ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–º, –Ω–µ –¥—É–±–ª–∏—Ä—É–µ–º
      if (prev.includes(newText)) return prev;
      
      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª
      return prev + ' ' + newText;
    });
  };

  if (!session) {
    return <div>–ó–∞–≥—Ä—É–∑–∫–∞...</div>;
  }

  const progress = session.currentPhase / session.totalPhases * 100;

  return (
    <div className="min-h-screen bg-black text-white p-6">
      <div className="max-w-4xl mx-auto space-y-6">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <div className="flex items-center justify-between bg-white/5 backdrop-blur-xl border border-white/10 rounded-3xl p-4 md:p-8 shadow-2xl">
          <div className="flex items-center gap-3">
            <Button onClick={onBack} variant="outline" size="sm" className="bg-white/5 border-white/10 text-white hover:bg-white/10">
              <ArrowLeft className="h-4 w-4 mr-2" />
              –ù–∞–∑–∞–¥
            </Button>
            <div>
              <h1 className="text-3xl font-bold text-white">–ò–ò-–ò–Ω—Ç–µ—Ä–≤—å—é –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è</h1>
              <p className="text-gray-400 text-sm">–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è</p>
            </div>
          </div>
          <div className="flex items-center gap-2">
            <Badge className="bg-blue-600 text-white">
              <Brain className="h-4 w-4 mr-1" />
              –§–∞–∑–∞ {session.currentPhase + 1}/{session.totalPhases}
            </Badge>
          </div>
        </div>

        {/* –ü—Ä–æ–≥—Ä–µ—Å—Å */}
        <Card className="bg-white/5 border-white/10 text-white">
          <CardContent className="p-4">
            <div className="flex justify-between text-sm text-gray-400 mb-2">
              <span>–ü—Ä–æ–≥—Ä–µ—Å—Å –∏–Ω—Ç–µ—Ä–≤—å—é</span>
              <span>{Math.round(progress)}%</span>
            </div>
            <Progress value={progress} className="h-2" />
          </CardContent>
        </Card>

        {/* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç */}
        <Tabs value={showAnalysis ? 'analysis' : 'interview'} onValueChange={(v) => setShowAnalysis(v === 'analysis')} className="w-full">
          <TabsList className="grid w-full grid-cols-2 mb-6 bg-white/5 border border-white/10 rounded-2xl p-1">
            <TabsTrigger value="interview" className="data-[state=active]:bg-white/10 data-[state=active]:text-white rounded-xl">
              <Bot className="h-4 w-4 mr-2" />
              –ò–Ω—Ç–µ—Ä–≤—å—é
            </TabsTrigger>
            <TabsTrigger value="analysis" className="data-[state=active]:bg-white/10 data-[state=active]:text-white rounded-xl">
              <TrendingUp className="h-4 w-4 mr-2" />
              –ê–Ω–∞–ª–∏–∑
            </TabsTrigger>
          </TabsList>

          {/* –ò–Ω—Ç–µ—Ä–≤—å—é */}
          <TabsContent value="interview">
            <Card className="bg-white/5 border-white/10 text-white">
              <CardContent className="p-6">
                {/* –ß–∞—Ç */}
                <div className="bg-black/20 rounded-xl p-4 h-96 overflow-y-auto space-y-4 mb-4">
                  {session.messages.map((message) => (
                    <div key={message.id} className={`flex gap-3 ${message.role === 'user' ? 'justify-end' : 'justify-start'}`}>
                      <div className={`flex gap-3 max-w-[80%] ${message.role === 'user' ? 'flex-row-reverse' : 'flex-row'}`}>
                        <div className="flex-shrink-0 mt-1">
                          {message.role === 'ai' ? (
                            <div className="w-8 h-8 bg-purple-600 rounded-full flex items-center justify-center">
                              <Bot className="h-4 w-4" />
                            </div>
                          ) : (
                            <div className="w-8 h-8 bg-blue-600 rounded-full flex items-center justify-center">
                              <User className="h-4 w-4" />
                            </div>
                          )}
                        </div>
                        <div className={`p-3 rounded-xl ${
                          message.role === 'user' 
                            ? 'bg-blue-600 text-white' 
                            : 'bg-white/10 text-gray-100'
                        }`}>
                          <p className="text-sm whitespace-pre-wrap">{message.content}</p>
                          <span className="text-xs opacity-70 mt-1 block">
                            {message.timestamp.toLocaleTimeString()}
                          </span>
                          {message.analysis && (
                            <div className="mt-2 pt-2 border-t border-white/20">
                              <div className="flex gap-2 mb-1">
                                <Badge variant="outline" className="text-xs">
                                  –ö–∞—á–µ—Å—Ç–≤–æ: {message.analysis.communicationQuality.toFixed(1)}
                                </Badge>
                                <Badge variant="outline" className="text-xs">
                                  {message.analysis.sentiment === 'positive' ? 'üòä' : message.analysis.sentiment === 'negative' ? 'üòü' : 'üòê'}
                                </Badge>
                              </div>
                              <div className="text-xs text-gray-300">
                                –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {message.analysis.keywords.slice(0, 3).join(', ')}
                              </div>
                            </div>
                          )}
                        </div>
                      </div>
                    </div>
                  ))}
                  
                  {isLoading && (
                    <div className="flex gap-3 justify-start">
                      <div className="w-8 h-8 bg-purple-600 rounded-full flex items-center justify-center">
                        <Bot className="h-4 w-4" />
                      </div>
                      <div className="bg-white/10 text-gray-100 p-3 rounded-xl">
                        <div className="flex items-center gap-2">
                          <div className="animate-spin h-4 w-4 border-2 border-purple-400 border-t-transparent rounded-full"></div>
                          <span className="text-sm">–ò–ò –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç...</span>
                        </div>
                      </div>
                    </div>
                  )}
                  
                  <div ref={messagesEndRef} />
                </div>

                {/* –í–≤–æ–¥ */}
                {session.status !== 'completed' && (
                  <div className="space-y-4">
                    {useVoice ? (
                      <VoiceInput
                        onTranscription={handleVoiceInput}
                        placeholder="–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –∑–∞–ø–∏—Å–∏ –æ—Ç–≤–µ—Ç–∞"
                        onClear={() => setCurrentMessage('')}
                      />
                    ) : (
                      <Textarea
                        placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç..."
                        value={currentMessage}
                        onChange={(e) => setCurrentMessage(e.target.value)}
                        className="bg-white/5 border-white/10 text-white placeholder:text-gray-400"
                        rows={3}
                        onKeyPress={(e) => {
                          if (e.key === 'Enter' && !e.shiftKey) {
                            e.preventDefault();
                            handleSendMessage();
                          }
                        }}
                      />
                    )}
                    
                    <div className="flex justify-between items-center">
                      <Button
                        onClick={() => setUseVoice(!useVoice)}
                        variant="outline"
                        className="bg-white/5 border-white/10 text-white hover:bg-white/10"
                      >
                        <Mic className="h-4 w-4 mr-2" />
                        {useVoice ? '–¢–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥' : '–ì–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥'}
                      </Button>
                      
                      <Button 
                        onClick={handleSendMessage}
                        disabled={!currentMessage.trim() || isLoading}
                        className="bg-purple-600 hover:bg-purple-700"
                      >
                        <Send className="h-4 w-4 mr-2" />
                        –û—Ç–ø—Ä–∞–≤–∏—Ç—å
                      </Button>
                    </div>
                  </div>
                )}
              </CardContent>
            </Card>
          </TabsContent>

          {/* –ê–Ω–∞–ª–∏–∑ */}
          <TabsContent value="analysis">
            <div className="space-y-6">
              {/* –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
              <Card className="bg-white/5 border-white/10 text-white">
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <Award className="h-5 w-5" />
                    –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                    <div className="text-center p-4 bg-black/20 rounded-xl">
                      <div className="text-3xl font-bold text-blue-400">
                        {session.cumulativeAnalysis.overallScore.toFixed(1)}
                      </div>
                      <div className="text-sm text-gray-400">–û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞</div>
                    </div>
                    <div className="text-center p-4 bg-black/20 rounded-xl">
                      <div className="text-3xl font-bold text-green-400">
                        {session.cumulativeAnalysis.strengths.length}
                      </div>
                      <div className="text-sm text-gray-400">–°–∏–ª—å–Ω—ã—Ö —Å—Ç–æ—Ä–æ–Ω</div>
                    </div>
                    <div className="text-center p-4 bg-black/20 rounded-xl">
                      <div className="text-3xl font-bold text-yellow-400">
                        {session.cumulativeAnalysis.keyInsights.length}
                      </div>
                      <div className="text-sm text-gray-400">–ö–ª—é—á–µ–≤—ã—Ö –∏–Ω—Å–∞–π—Ç–æ–≤</div>
                    </div>
                  </div>
                </CardContent>
              </Card>

              {/* –ö–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏ */}
              <Card className="bg-white/5 border-white/10 text-white">
                <CardHeader>
                  <CardTitle>–û—Ü–µ–Ω–∫–∞ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="space-y-4">
                    {Object.entries(session.cumulativeAnalysis.competencyScores).map(([comp, score]) => (
                      <div key={comp} className="space-y-2">
                        <div className="flex justify-between">
                          <span className="font-medium">{STANDARD_COMPETENCIES[comp]?.name || comp}</span>
                          <span className="text-sm text-gray-400">{score.toFixed(1)}/5.0</span>
                        </div>
                        <Progress value={(score / 5) * 100} className="h-2" />
                      </div>
                    ))}
                  </div>
                </CardContent>
              </Card>

              {/* –ò–Ω—Å–∞–π—Ç—ã */}
              {session.cumulativeAnalysis.keyInsights.length > 0 && (
                <Card className="bg-white/5 border-white/10 text-white">
                  <CardHeader>
                    <CardTitle className="flex items-center gap-2">
                      <Lightbulb className="h-5 w-5" />
                      –ö–ª—é—á–µ–≤—ã–µ –∏–Ω—Å–∞–π—Ç—ã
                    </CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-2">
                      {session.cumulativeAnalysis.keyInsights.map((insight, i) => (
                        <div key={i} className="flex items-center gap-2">
                          <CheckCircle className="h-4 w-4 text-green-500 flex-shrink-0" />
                          <span className="text-sm">{insight}</span>
                        </div>
                      ))}
                    </div>
                  </CardContent>
                </Card>
              )}
            </div>
          </TabsContent>
        </Tabs>
      </div>
    </div>
  );
}
