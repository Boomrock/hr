import { useMemo } from 'react';
import { ROLE_PERMISSIONS } from '@/types/roles';
import type { UserRole } from '@/types/roles';

export interface UserPermissions {
  // –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
  canAccessHRChat: boolean;
  canAccessOrgChart: boolean;
  canAccessEmployees: boolean;
  canAccessAssessments: boolean;
  canAccessReports: boolean;

  // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
  canCreateUsers: boolean;
  canEditUsers: boolean;
  canDeleteUsers: boolean;
  canManageCompany: boolean;

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ
  canAccessSettings: boolean;
  canGenerateInvites: boolean;
  canManageRoles: boolean;
  canViewAllData: boolean;

  // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
  maxInvitesPerDay?: number;
  maxAssessmentsPerMonth?: number;
}

export function usePermissions(userRole: UserRole | undefined): UserPermissions {
  return useMemo(() => {
    if (!userRole) {
      return {
        canAccessHRChat: false,
        canAccessOrgChart: false,
        canAccessEmployees: false,
        canAccessAssessments: false,
        canAccessReports: false,
        canCreateUsers: false,
        canEditUsers: false,
        canDeleteUsers: false,
        canManageCompany: false,
        canAccessSettings: false,
        canGenerateInvites: false,
        canManageRoles: false,
        canViewAllData: false,
      };
    }

    return ROLE_PERMISSIONS[userRole];
  }, [userRole]);
}

export function useRoleInfo(userRole: UserRole | undefined) {
  return useMemo(() => {
    if (!userRole) {
      return {
        name: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω',
        description: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω',
        color: 'bg-gray-100 text-gray-800 border-gray-200',
        icon: '‚ùì',
      };
    }

    const ROLE_INFO = {
      administrator: {
        name: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
        description: '–ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º —Å–∏—Å—Ç–µ–º—ã',
        color: 'bg-red-100 text-red-800 border-red-200',
        icon: 'üîê',
      },
      managing_director: {
        name: '–£–ø—Ä–∞–≤–ª—è—é—â–∏–π –¥–∏—Ä–µ–∫—Ç–æ—Ä',
        description: '–í—ã—Å—à–µ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –∫–æ–º–ø–∞–Ω–∏–∏',
        color: 'bg-purple-100 text-purple-800 border-purple-200',
        icon: 'üëë',
      },
      director: {
        name: '–î–∏—Ä–µ–∫—Ç–æ—Ä',
        description: '–í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–µ–π',
        color: 'bg-orange-100 text-orange-800 border-orange-200',
        icon: '‚≠ê',
      },
      manager: {
        name: '–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å',
        description: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–¥–µ–ª–æ–º –∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏',
        color: 'bg-blue-100 text-blue-800 border-blue-200',
        icon: 'üëî',
      },
      employee: {
        name: '–°–æ—Ç—Ä—É–¥–Ω–∏–∫',
        description: '–ë–∞–∑–æ–≤—ã–π –¥–æ—Å—Ç—É–ø –∫ HR —Ñ—É–Ω–∫—Ü–∏—è–º',
        color: 'bg-green-100 text-green-800 border-green-200',
        icon: 'üë§',
      },
    };

    return ROLE_INFO[userRole];
  }, [userRole]);
}