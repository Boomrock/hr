[
  {
    "question": "Расскажите о себе и своем опыте работы",
    "answer": "Кандидат должен кратко рассказать о своем профессиональном пути, ключевых достижениях, навыках и мотивации. Ответ должен быть структурированным, релевантным позиции и не превышать 2-3 минуты.",
    "category": "общие вопросы",
    "tags": ["опыт", "мотивация", "самопрезентация"],
    "difficulty": "junior"
  },
  {
    "question": "Что такое замыкания (closures) в JavaScript?",
    "answer": "Замыкание - это комбинация функции и лексического окружения, в котором эта функция была объявлена. Замыкание дает доступ к области видимости внешней функции из внутренней функции. Переменные из внешней функции доступны внутренней функции даже после того, как внешняя функция завершила выполнение.",
    "category": "javascript",
    "tags": ["замыкания", "область видимости", "функции"],
    "difficulty": "middle"
  },
  {
    "question": "Объясните разницу между `var`, `let` и `const` в JavaScript",
    "answer": "`var` имеет функциональную область видимости и поднимается (hoisting), может быть переопределена. `let` имеет блочную область видимости, может быть переназначена, но не переопределена. `const` также имеет блочную область видимости, но не может быть переназначена после инициализации.",
    "category": "javascript",
    "tags": ["переменные", "область видимости", "ES6"],
    "difficulty": "junior"
  },
  {
    "question": "Что такое Virtual DOM в React?",
    "answer": "Virtual DOM - это JavaScript представление реального DOM в памяти. React использует Virtual DOM для оптимизации обновлений интерфейса. При изменении состояния React создает новое дерево Virtual DOM, сравнивает его с предыдущим (reconciliation) и обновляет только те части реального DOM, которые действительно изменились.",
    "category": "react",
    "tags": ["virtual dom", "производительность", "reconciliation"],
    "difficulty": "middle"
  },
  {
    "question": "Что такое хуки (hooks) в React?",
    "answer": "Хуки - это функции, которые позволяют использовать состояние и другие возможности React в функциональных компонентах. Основные хуки: useState для состояния, useEffect для побочных эффектов, useContext для контекста, useMemo и useCallback для оптимизации.",
    "category": "react",
    "tags": ["hooks", "useState", "useEffect", "функциональные компоненты"],
    "difficulty": "middle"
  },
  {
    "question": "Опишите принципы SOLID",
    "answer": "SOLID - это пять принципов объектно-ориентированного программирования: Single Responsibility (единственная ответственность), Open/Closed (открыт для расширения, закрыт для модификации), Liskov Substitution (подстановка Лисков), Interface Segregation (разделение интерфейсов), Dependency Inversion (инверсия зависимостей).",
    "category": "архитектура",
    "tags": ["SOLID", "ООП", "принципы проектирования"],
    "difficulty": "senior"
  },
  {
    "question": "Как бы вы оптимизировали производительность React приложения?",
    "answer": "Методы оптимизации: использование React.memo для мемоизации компонентов, useMemo и useCallback для мемоизации значений и функций, lazy loading с React.Suspense, виртуализация длинных списков, code splitting, оптимизация изображений, профилирование с React DevTools.",
    "category": "react",
    "tags": ["оптимизация", "производительность", "мемоизация"],
    "difficulty": "senior"
  },
  {
    "question": "Объясните разницу между Promise и async/await",
    "answer": "Promise - это объект для работы с асинхронным кодом, имеет состояния pending, fulfilled, rejected. async/await - синтаксический сахар над Promise, делает асинхронный код более читаемым и похожим на синхронный. async функции возвращают Promise, await ожидает выполнения Promise.",
    "category": "javascript",
    "tags": ["асинхронность", "promise", "async await"],
    "difficulty": "middle"
  },
  {
    "question": "Что такое REST API и какие у него принципы?",
    "answer": "REST (Representational State Transfer) - архитектурный стиль для создания веб-сервисов. Принципы: stateless (без состояния), uniform interface (единообразный интерфейс), client-server архитектура, cacheable (кешируемость), layered system (слоистая система), code on demand (опционально).",
    "category": "api",
    "tags": ["REST", "API", "веб-сервисы", "HTTP"],
    "difficulty": "middle"
  },
  {
    "question": "Как вы подходите к решению сложных технических проблем?",
    "answer": "Кандидат должен описать структурированный подход: анализ проблемы, декомпозиция на подзадачи, исследование существующих решений, прототипирование, тестирование гипотез, документирование решения. Важно показать навыки критического мышления и систематичность.",
    "category": "проблемное мышление",
    "tags": ["решение проблем", "аналитическое мышление", "методология"],
    "difficulty": "senior"
  },
  {
    "question": "Расскажите о своих карьерных целях",
    "answer": "Кандидат должен показать четкое понимание своих профессиональных целей, готовность к развитию, соответствие целей возможностям компании. Ответ должен быть реалистичным и показывать долгосрочную мотивацию.",
    "category": "карьерные цели",
    "tags": ["карьера", "цели", "развитие", "мотивация"],
    "difficulty": "junior"
  },
  {
    "question": "Что такое CI/CD и зачем это нужно?",
    "answer": "CI/CD - это практики Continuous Integration (непрерывная интеграция) и Continuous Deployment (непрерывная доставка). CI автоматизирует сборку и тестирование кода при каждом коммите. CD автоматизирует развертывание. Преимущества: быстрое обнаружение ошибок, сокращение времени доставки, повышение качества кода.",
    "category": "devops",
    "tags": ["CI/CD", "автоматизация", "тестирование", "развертывание"],
    "difficulty": "middle"
  }
]